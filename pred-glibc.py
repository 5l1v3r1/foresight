numbers = [1433930398, 1106412057, 640477417, 59117270, 2120519271, 1893586918, 1027842903, 2104660314, 1528734569, 642221070, 421852381, 1956612032, 1316030463, 1814558260, 559292256, 581442362, 1630503356, 184650218, 1237629167, 806952867, 269524441, 1272182305, 1852616826, 2137335155, 1678481048, 229356479, 1729092987, 1576577469, 1528713575, 697945520, 1048756383, 815160326, 1804357577, 1689233800, 874277596, 1777393200, 1435337071, 1902120499, 1734569867, 816587992, 396857921, 8938600, 625716376, 1712888384, 1823496860, 1185008632, 146847098, 1306516568, 1369658850, 1384476265, 2113469436, 1639183291, 509174923, 1818602614, 1629034799, 40172323, 2047959094, 1210644138, 1616749792, 1429189021, 1908589658, 518022527, 96865699, 1565463588, 59772680, 971143295, 1195373140, 1495109751, 725780146, 782459359, 164214095, 1122638067, 791397960, 789930471, 688042803, 467411172, 1974939103, 834889902, 1773927741, 1197114306, 71882519, 1739913529, 688813949, 581057442, 1411032495, 170365100, 621229765, 1311507941, 1381009238, 90495909, 593213315, 1142115249, 608518437, 690079014, 560095189, 668291117, 1661222310, 1755468329, 15917220, 239518808, 390444041, 180131315, 1362156876, 1181842001, 970061786, 2050199679, 1649253173, 797517241, 737605933, 1275697266, 1994631547, 809488453, 868127147, 535961849, 1390545895, 131675995, 706326949, 2011775661, 1443183936, 2087336188, 2102271570, 2036397251, 1081967789, 563306359, 578992618, 1642062978, 1231597476, 92731280, 1250047659, 1247514696, 332250088, 1640491700, 1427646011, 1694406964, 674850053, 250224149, 1597122996, 176619579, 1047741391, 187245281, 1452316845, 894889290, 996733734, 172960345, 1430851139, 239795982, 304636340, 2137178089, 104087995, 1747820276, 2077030629, 58875917, 1636733880, 1011514770, 622182277, 68242850, 506094100, 1853779753, 160974130, 1756141759, 953810802, 493224218, 1249149812, 233973165, 40147535, 1923999865, 484197315, 1637270531, 2100619444, 1531938706, 1824515812, 1405452642, 279344348, 673765899, 1578412987, 1710195488, 913561881, 1883049327, 1699889929, 1017649876, 1483385955, 1629436910, 1076525793, 972636187, 493468032, 1698708070, 1040879037, 999562132, 1405004176, 1201853167, 608220243, 211331330, 1695077386, 1857370055, 445304495, 1735224921, 1633886273, 929501810, 1225011804, 1587022069, 313956868, 902043968, 844991063, 593301217, 1575809867, 275920402, 156013057, 341888100, 11486081, 1855902986, 1359537976, 1494872037, 1337856248, 288580122, 320024576, 1831324280, 1987288192, 1360903614, 683402764, 1244808720, 415273133, 1291623007, 1456140050, 2110350519, 1001509415, 1901444546, 1698091792, 487912040, 683462708, 775619948, 2074934109, 997419577, 1677663917, 772441525, 1590720794, 1105990136, 1048361927]

class State(object):
    def __init__(self, value, lsb):
        self.value = value
        self.lsb = lsb
        self.uncertain = True

    def predicted(self):
        return (self.value << 1) + self.lsb

values = [State(i, 0) for i in numbers]

for i, value in enumerate(values):
    if i < 31:
        continue

    predicted_value = values[i-3].predicted()
    predicted_value += values[i-31].predicted()
    predicted_value = (predicted_value % 2**32) >> 1

    if (not values[i-3].uncertain) and (not values[i-31].uncertain):
        assert(value.value == predicted_value)

    if value.value == predicted_value:
        values[i-3].lsb = 0
        values[i-3].uncertain = False
        values[i-31].lsb = 0
        values[i-31].uncertain = False
    elif value.value == predicted_value+1:
        if not values[i-31].uncertain:
            values[i-3].lsb = not values[i-31].lsb
            values[i-3].uncertain = False
        else:
            # this can be wrong
            values[i-3].lsb = not values[i-31].lsb
    elif value.value == predicted_value+2:
        values[i-3].lsb = 1
        values[i-3].uncertain = False
        values[i-31].lsb = 1
        values[i-31].uncertain = False
    else:
        print(value.value, predicted_value)
        assert(False)

    if i > 35:
        for v in values[i-34:i-3]:
            if v.uncertain:
                break
        else:
            print("All state recovered", i)
            break

def predict_next_value(values):
    global i
    global predicted_value
    while(True):
        i += 1
        predicted_value = values[i-3].predicted()
        predicted_value += values[i-31].predicted()
        predicted_value = (predicted_value % 2**32) >> 1
        values.append(State(predicted_value, 0))
        yield predicted_value

# for n, value in enumerate(predict_next_value(values)):
#     if n > 10: break
#     print(value)
